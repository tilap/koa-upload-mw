{"version":3,"sources":["../src/index.js"],"names":["middlewaresConfig","logger","console","formatter","config","constructor","Array","ctx","next","request","method","trace","body","files","Object","keys","length","info","Error","mediaPromises","fields","forEach","mediaKey","tmpFilepath","path","push","then","file","formFileData","Promise","all","map","cfg","index","name","storage","conditions","validators","uploader","storedFileData","data","catch","error","type","message","key","results","res","mediaResults","json","result","success","filter","mediaResult"],"mappings":"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","file":"index.js","sourcesContent":["import extractMediaInfos from './lib/extractMediaInfos';\nimport assertConditions from './lib/assertConditions';\nimport assertValidators from './lib/assertValidators';\n\nexport default function (middlewaresConfig, { logger = console, formatter = null } = {}) {\n  const config = middlewaresConfig.constructor === Array ? middlewaresConfig : [middlewaresConfig];\n\n  return async (ctx, next) => {\n    if (!ctx.request || !ctx.request.method || ctx.request.method !== 'POST') {\n      logger.trace('Skip request, not a post request');\n      return next();\n    }\n\n    if (!ctx.request.body) {\n      logger.trace('Skip request, no body found in a post request');\n      logger.trace('Is bodyparser setup?');\n      return next();\n    }\n\n    if (!ctx.request.body.files || Object.keys(ctx.request.body.files).length === 0) {\n      logger.info('Return error, no file received');\n      throw new Error('No file submitted');\n    }\n\n    const mediaPromises = [];\n    const fields = ctx.request.body.fields || {};\n    const request = ctx.request;\n    Object.keys(ctx.request.body.files).forEach((mediaKey) => {\n      const tmpFilepath = ctx.request.body.files[mediaKey].path;\n      mediaPromises.push(\n        extractMediaInfos(tmpFilepath).then((file) => {\n          const formFileData = { file, fields, request };\n          return Promise.all(config.map((cfg, index) => {\n            const { name = `uploader-${index + 1}`, storage, conditions = [], validators = [] } = cfg;\n            return assertConditions(conditions, formFileData)\n              .then(() => {\n                logger.trace('Conditions passed', { mediaKey, uploader: name });\n                return assertValidators(validators, formFileData);\n              })\n              .then(() => {\n                logger.trace('Validation passed', { mediaKey, uploader: name });\n                return storage(file);\n              })\n              .then((storedFileData) => {\n                logger.trace('Storage passed', { mediaKey, uploader: name });\n                return ({ name, data: storedFileData });\n              })\n              .catch(error => ({ name, error: { type: error.name, message: error.message } }));\n          })).then(res => ({ key: mediaKey, results: res }));\n        }),\n      );\n    });\n\n    // eslint-disable-next-line no-return-assign,no-param-reassign\n    return ctx.body = await Promise.all(mediaPromises).then((mediaResults) => {\n      const json = { result: 'success', success: {} };\n      mediaResults\n        .map(({ key, results }) => ({\n          key,\n          results: results.filter(res => (!res.error || (res.error && res.error.type !== 'ConditionError'))),\n        }))\n        .filter(({ results }) => results.length > 0)\n        .forEach((mediaResult) => {\n          json.success[mediaResult.key] = mediaResult.results;\n        });\n      logger.info('Successfull json return', json);\n      if (formatter) {\n        return formatter(json);\n      }\n      return json;\n    }).catch((error) => {\n      logger.error('Huge error', error);\n      return { result: 'error', error }; // eslint-disable-line no-param-reassign\n    });\n  };\n}\n"]}