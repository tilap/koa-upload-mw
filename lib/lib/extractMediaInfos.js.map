{"version":3,"sources":["../../src/lib/extractMediaInfos.js"],"names":["IMAGES_MIMES","filepath","output","existsSync","path","statSync","size","headBuffer","sync","mime","ext","extension","includes","height","width","Promise","image","err","data","resolve","exifs","Error","extractMediaInfos"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,eAAe,CAAC,WAAD,EAAc,YAAd,EAA4B,YAA5B,EAA0C,YAA1C,EAAwD,WAAxD,CAArB;;;uDAEe,iBAAiCC,QAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,kBADO,GACE,EADF;;;AAGb,kCAAO,aAAGC,UAAH,CAAcF,QAAd,CAAP,oDAAgFA,QAAhF;;AAEAC,mBAAOE,IAAP,GAAcH,QAAd;;AAEA;AAPa,2BAQI,aAAGI,QAAH,CAAYJ,QAAZ,CARJ,EAQLK,IARK,gBAQLA,IARK;;AASbJ,mBAAOI,IAAP,GAAcA,IAAd;;AAEA;AACMC,sBAZO,GAYM,oBAAUC,IAAV,CAAeP,QAAf,EAAyB,CAAzB,EAA4B,IAA5B,CAZN;AAAA,oBAaoB,wBAASM,UAAT,KAAwB,EAb5C,qBAaLE,IAbK,EAaLA,IAbK,8BAaE,EAbF,iCAaMC,GAbN,EAaMA,GAbN,6BAaY,EAbZ;;AAcbR,mBAAOO,IAAP,GAAcA,IAAd;AACAP,mBAAOS,SAAP,GAAmBD,GAAnB;;AAEA;;AAjBa,iBAkBTV,aAAaY,QAAb,CAAsBH,IAAtB,CAlBS;AAAA;AAAA;AAAA;;AAAA,sBAmBe,yBAAOR,QAAP,CAnBf,EAmBHY,MAnBG,WAmBHA,MAnBG,EAmBKC,KAnBL,WAmBKA,KAnBL;;AAoBXZ,mBAAOW,MAAP,GAAgBA,MAAhB;AACAX,mBAAOY,KAAP,GAAeA,KAAf;;AArBW;AAAA,mBAuBU,IAAIC,OAAJ,CAAY;AAAA,qBAC/B,mBAAc,EAAEC,OAAOf,QAAT,EAAd,EAAmC,UAACgB,GAAD,EAAMC,IAAN;AAAA,uBAAeC,QAAQF,MAAM,EAAN,GAAWC,IAAnB,CAAf;AAAA,eAAnC,CAD+B;AAAA,aAAZ,CAvBV;;AAAA;AAuBXhB,mBAAOkB,KAvBI;AAAA;AAAA;;AAAA;AAAA,kBA2BL,IAAIC,KAAJ,CAAU,sCAAV,CA3BK;;AAAA;AAAA,6CA8BNnB,MA9BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeoB,iB;;;;SAAAA,iB","file":"extractMediaInfos.js","sourcesContent":["import assert from 'assert';\nimport ExifImage from 'exif';\nimport fileType from 'file-type';\nimport fs from 'fs';\nimport readchunk from 'read-chunk';\nimport sizeOf from 'image-size';\n\nconst IMAGES_MIMES = ['image/gif', 'image/jpeg', 'image/tiff', 'image/webp', 'image/png'];\n\nexport default async function extractMediaInfos(filepath) {\n  const output = {};\n\n  assert(fs.existsSync(filepath), `Cannot extract file infos: file not found in ${filepath}`);\n\n  output.path = filepath;\n\n  // File size\n  const { size } = fs.statSync(filepath);\n  output.size = size;\n\n  // Mimetype\n  const headBuffer = readchunk.sync(filepath, 0, 4100);\n  const { mime = '', ext = '' } = (fileType(headBuffer) || {});\n  output.mime = mime;\n  output.extension = ext;\n\n  // Specific mimetype infos\n  if (IMAGES_MIMES.includes(mime)) {\n    const { height, width } = sizeOf(filepath);\n    output.height = height;\n    output.width = width;\n\n    output.exifs = await new Promise(resolve =>\n      new ExifImage({ image: filepath }, (err, data) => resolve(err ? {} : data)),\n    );\n  } else {\n    throw new Error('cannot manage non image media... yet');\n  }\n\n  return output;\n}\n"]}