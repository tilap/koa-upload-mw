{"version":3,"sources":["../../src/lib/assertConditions.js"],"names":["conditions","data","constructor","Array","length","Promise","resolve","conditionsArr","conditionsPromisified","map","reject","all","func","then","res","catch","error","results","includes","message"],"mappings":";;;;;;kBAIe,UAAUA,UAAV,EAAsBC,IAAtB,EAA4B;AACzC,MAAI,CAACD,UAAD,IAAgBA,WAAWE,WAAX,KAA2BC,KAA3B,IAAoCH,WAAWI,MAAX,KAAsB,CAA9E,EAAkF;AAChF,WAAOC,QAAQC,OAAR,EAAP;AACD;;AAED,MAAMC,gBAAgBP,WAAWE,WAAX,KAA2BC,KAA3B,GAAmCH,UAAnC,GAAgD,CAACA,UAAD,CAAtE;AACA,MAAMQ,wBAAwBD,cAAcE,GAAd,CAAkB;AAAA,WAAQ,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAUI,MAAV,EAAqB;AACvF,UAAI;AACFL,gBAAQM,GAAR,CAAY,CAACC,KAAKX,IAAL,CAAD,CAAZ,EACGY,IADH,CACQ;AAAA,iBAAQC,IAAI,CAAJ,MAAW,KAAX,GAAmBJ,OAAO,KAAP,CAAnB,GAAmCJ,QAAQ,IAAR,CAA3C;AAAA,SADR,EAEGS,KAFH,CAES;AAAA,iBAASL,OAAOM,KAAP,CAAT;AAAA,SAFT;AAGD,OAJD,CAIE,OAAOA,KAAP,EAAc;AACdN,eAAOM,KAAP;AACD;AACF,KARuD,CAAR;AAAA,GAAlB,CAA9B;;AAUA,SAAOX,QAAQM,GAAR,CAAYH,qBAAZ,EACJK,IADI,CACC,UAACI,OAAD,EAAa;AACjB,QAAIA,QAAQC,QAAR,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM,wBAAmB,wCAAnB,CAAN;AACD;AACD,WAAO,IAAP;AACD,GANI,EAOJH,KAPI,CAOE,UAACC,KAAD,EAAW;AAChB,UAAM,wBAAmBA,MAAMG,OAAzB,CAAN;AACD,GATI,CAAP;AAUD,C;;AA9BD","file":"assertConditions.js","sourcesContent":["import ConditionError from '../errors/Condition';\n\n// Process a list of function (forced as promise) and throw a ConditionError if one failed or\n// return false\nexport default function (conditions, data) {\n  if (!conditions || (conditions.constructor === Array && conditions.length === 0)) {\n    return Promise.resolve();\n  }\n\n  const conditionsArr = conditions.constructor === Array ? conditions : [conditions];\n  const conditionsPromisified = conditionsArr.map(func => new Promise((resolve, reject) => {\n    try {\n      Promise.all([func(data)])\n        .then(res => (res[0] === false ? reject(false) : resolve(true)))\n        .catch(error => reject(error));\n    } catch (error) {\n      reject(error);\n    }\n  }));\n\n  return Promise.all(conditionsPromisified)\n    .then((results) => {\n      if (results.includes(false)) {\n        throw new ConditionError('At least one condition failed silently');\n      }\n      return true;\n    })\n    .catch((error) => {\n      throw new ConditionError(error.message);\n    });\n}\n"]}