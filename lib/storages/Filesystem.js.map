{"version":3,"sources":["../../src/storages/Filesystem.js"],"names":["rootUrl","originalPath","path","logger","console","url","replace","distPath","file","filename","generateNotExistingFilenameInDir","extension","distFile","copySync","error","Error","otherProps","generateUuidFilename","dir","existsSync"],"mappings":";;;;;;;;kBAkBe,gBAA6D;AAAA,MAAjDA,OAAiD,QAAjDA,OAAiD;AAAA,MAAlCC,YAAkC,QAAxCC,IAAwC;AAAA,yBAApBC,MAAoB;AAAA,MAApBA,MAAoB,+BAAXC,OAAW;;AAC1E,wBAAOJ,OAAP,EAAgB,qBAAhB;AACA,wBAAOC,YAAP,EAAqB,6BAArB;;AAEA,MAAMI,MAAML,QAAQM,OAAR,CAAgB,iBAAhB,EAAmC,IAAnC,CAAZ;AACA,MAAMC,WAAWN,aAAaK,OAAb,CAAqB,iBAArB,EAAwC,IAAxC,CAAjB;;AAEA,SAAO,UAACE,IAAD,EAAU;AACf,QAAMC,WAAWC,iCAAiCH,QAAjC,EAA2CC,KAAKG,SAAhD,CAAjB;AACA,QAAMC,WAAcL,QAAd,SAA0BE,QAAhC;;AAEA,QAAI;AACF,wBAAQI,QAAR,CAAiBL,KAAKN,IAAtB,EAA4BU,QAA5B;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdX,aAAOW,KAAP,CAAa,yBAAb,EAAwC,EAAEA,YAAF,EAAxC;AACA,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED;;AAXe,QAYPb,IAZO,GAYiBM,IAZjB,CAYPN,IAZO;AAAA,QAYEc,UAZF,4BAYiBR,IAZjB,aAYuB;;;AACtC;AACEH,WAAQA,GAAR,SAAeI;AADjB,OAEKO,UAFL;AAID,GAjBD;AAkBD,C;;AA3CD;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAEA,SAASC,oBAAT,CAA8BN,SAA9B,EAAyC;AACvC,SAAU,kBAAV,SAAoBA,SAApB;AACD;;AAED,SAASD,gCAAT,CAA0CQ,GAA1C,EAA+CP,SAA/C,EAA0D;AACxD,MAAIH,OAAOS,qBAAqBN,SAArB,CAAX;AACA,SAAO,aAAGQ,UAAH,CAAiBD,GAAjB,SAAwBV,IAAxB,CAAP,EAAwC;AACtCA,WAAOS,qBAAqBN,SAArB,CAAP;AACD;AACD,SAAOH,IAAP;AACD","file":"Filesystem.js","sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport fsExtra from 'fs-extra';\n\nimport uuid from 'uuid/v4';\n\nfunction generateUuidFilename(extension) {\n  return `${uuid()}.${extension}`;\n}\n\nfunction generateNotExistingFilenameInDir(dir, extension) {\n  let file = generateUuidFilename(extension);\n  while (fs.existsSync(`${dir}/${file}`)) {\n    file = generateUuidFilename(extension);\n  }\n  return file;\n}\n\nexport default function ({ rootUrl, path: originalPath, logger = console }) {\n  assert(rootUrl, 'No rootUrl provided');\n  assert(originalPath, 'No path provided in options');\n\n  const url = rootUrl.replace(/^(.*[^/])(\\/*)$/, '$1');\n  const distPath = originalPath.replace(/^(.*[^/])(\\/*)$/, '$1');\n\n  return (file) => {\n    const filename = generateNotExistingFilenameInDir(distPath, file.extension);\n    const distFile = `${distPath}/${filename}`;\n\n    try {\n      fsExtra.copySync(file.path, distFile);\n    } catch (error) {\n      logger.error('Error while moving file', { error });\n      throw new Error('Error while moving file');\n    }\n\n    // Remove path\n    const { path, ...otherProps } = file; // eslint-disable-line no-unused-vars\n    return {\n      url: `${url}/${filename}`,\n      ...otherProps,\n    };\n  };\n}\n"]}