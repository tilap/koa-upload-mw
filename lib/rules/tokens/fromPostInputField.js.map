{"version":3,"sources":["../../../src/rules/tokens/fromPostInputField.js"],"names":["fieldId","callback","constructor","String","Function","fields","file","request","method","body","Error","token"],"mappings":";;;;;;kBAEe,UAAUA,OAAV,EAAoC;AAAA;;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AACjD,wBAAOD,OAAP,EAAgB,0DAAhB;AACA,wBAAOA,QAAQE,WAAR,KAAwBC,MAA/B,EAAuC,0BAAvC;AACA,wBAAO,CAACF,QAAD,IAAaA,SAASC,WAAT,KAAyBE,QAA7C,EAAuD,6BAAvD;;AAEA;AAAA,yDAAO;AAAA,UAASC,MAAT,SAASA,MAAT;AAAA,UAAiBC,IAAjB,SAAiBA,IAAjB;AAAA,UAAuBC,OAAvB,SAAuBA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEH,CAACA,OAAD,IACA,CAACA,QAAQC,MAAT,KAAoB,MADpB,IAEA,CAACD,QAAQE,IAFT,IAGA,CAACF,QAAQE,IAAR,CAAaJ,MAHd,IAIA,CAACE,QAAQE,IAAR,CAAaJ,MAAb,CAAoBL,OAApB,CANE;AAAA;AAAA;AAAA;;AAAA,oBAOG,IAAIU,KAAJ,CAAU,gCAAV,CAPH;;AAAA;AAAA,+CAUET,WACLA,SAAS,EAAEI,cAAF,EAAUC,UAAV,EAAgBC,gBAAhB,EAAyBI,OAAOJ,QAAQE,IAAR,CAAaJ,MAAb,CAAoBL,OAApB,CAAhC,EAAT,CADK,GAEL,IAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAcD,C;;AArBD","file":"fromPostInputField.js","sourcesContent":["import assert from 'assert';\n\nexport default function (fieldId, callback = null) {\n  assert(fieldId, 'no fieldId provided in configuration for auth middleware');\n  assert(fieldId.constructor === String, 'fieldId must be a string');\n  assert(!callback || callback.constructor === Function, 'Callback must be a function');\n\n  return async ({ fields, file, request }) => {\n    if (\n      !request ||\n      !request.method === 'POST' ||\n      !request.body ||\n      !request.body.fields ||\n      !request.body.fields[fieldId]) {\n      throw new Error('you must provide a valid token');\n    }\n\n    return callback ?\n      callback({ fields, file, request, token: request.body.fields[fieldId] }) :\n      true;\n  };\n}\n"]}