{"version":3,"sources":["../../../src/rules/headers/has.js"],"names":["headerId","errorMessage","callback","constructor","String","Function","request","header","Error"],"mappings":";;;;;;kBAEe,UAAUA,QAAV,EAAoBC,YAApB,EAAmD;AAAA;;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AAChE,wBAAOF,QAAP,EAAiB,uCAAjB;AACA,wBAAOA,SAASG,WAAT,KAAyBC,MAAhC,EAAwC,2BAAxC;AACA,wBAAO,CAACF,QAAD,IAAaA,SAASC,WAAT,KAAyBE,QAA7C,EAAuD,6BAAvD;;AAEA;AAAA,yDAAO;AAAA,UAASC,OAAT,SAASA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEHA,WACAA,QAAQC,MADR,IAEAD,QAAQC,MAAR,CAAeP,QAAf,CAJG;AAAA;AAAA;AAAA;;AAAA,+CAMIE,WAAWA,SAASI,QAAQC,MAAR,CAAeP,QAAf,CAAT,CAAX,GAAgD,IANpD;;AAAA;AAAA,oBASC,IAAIQ,KAAJ,CAAUP,4BAA0BD,QAA1B,cAAV,CATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAWD,C;;AAlBD","file":"has.js","sourcesContent":["import assert from 'assert';\n\nexport default function (headerId, errorMessage, callback = null) {\n  assert(headerId, 'no headerId provided in configuration');\n  assert(headerId.constructor === String, 'headerId must be a string');\n  assert(!callback || callback.constructor === Function, 'Callback must be a function');\n\n  return async ({ request }) => {\n    if (\n      request &&\n      request.header &&\n      request.header[headerId]\n    ) {\n      return callback ? callback(request.header[headerId]) : true;\n    }\n\n    throw new Error(errorMessage || `Header ${headerId} required`);\n  };\n}\n"]}